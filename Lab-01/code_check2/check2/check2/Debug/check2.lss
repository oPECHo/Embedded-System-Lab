
check2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000250  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f6  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070a  00000000  00000000  00000b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000443  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001688  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b9  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ac  00000000  00000000  00001a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001e31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	86 00       	.word	0x0086	; ????
  6a:	6a 00       	.word	0x006a	; ????
  6c:	6c 00       	.word	0x006c	; ????
  6e:	6e 00       	.word	0x006e	; ????
  70:	70 00       	.word	0x0070	; ????
  72:	72 00       	.word	0x0072	; ????
  74:	74 00       	.word	0x0074	; ????
  76:	76 00       	.word	0x0076	; ????
  78:	78 00       	.word	0x0078	; ????
  7a:	7a 00       	.word	0x007a	; ????
  7c:	7c 00       	.word	0x007c	; ????
  7e:	7e 00       	.word	0x007e	; ????
  80:	80 00       	.word	0x0080	; ????
  82:	82 00       	.word	0x0082	; ????
  84:	84 00       	.word	0x0084	; ????
  86:	93 00       	.word	0x0093	; ????
  88:	99 00       	.word	0x0099	; ????
  8a:	9f 00       	.word	0x009f	; ????
  8c:	a5 00       	.word	0x00a5	; ????
  8e:	ab 00       	.word	0x00ab	; ????
  90:	b1 00       	.word	0x00b1	; ????
  92:	b7 00       	.word	0x00b7	; ????
  94:	bd 00       	.word	0x00bd	; ????
  96:	c3 00       	.word	0x00c3	; ????
  98:	c9 00       	.word	0x00c9	; ????
  9a:	cf 00       	.word	0x00cf	; ????
  9c:	d5 00       	.word	0x00d5	; ????
  9e:	db 00       	.word	0x00db	; ????
  a0:	e1 00       	.word	0x00e1	; ????
  a2:	e7 00       	.word	0x00e7	; ????

000000a4 <__ctors_end>:
  a4:	11 24       	eor	r1, r1
  a6:	1f be       	out	0x3f, r1	; 63
  a8:	cf ef       	ldi	r28, 0xFF	; 255
  aa:	d8 e0       	ldi	r29, 0x08	; 8
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	cd bf       	out	0x3d, r28	; 61
  b0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <main>
  b4:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <bin_to_hex>:
#include <avr/io.h>
#define F_CPU 1.2E6
#include <util/delay.h>

uint8_t bin_to_hex(uint8_t bin) {
	switch (bin) {
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fc 01       	movw	r30, r24
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	ef 30       	cpi	r30, 0x0F	; 15
  c4:	f1 05       	cpc	r31, r1
  c6:	20 f4       	brcc	.+8      	; 0xd0 <bin_to_hex+0x14>
  c8:	ec 5c       	subi	r30, 0xCC	; 204
  ca:	ff 4f       	sbci	r31, 0xFF	; 255
  cc:	0c 94 20 01 	jmp	0x240	; 0x240 <__tablejump2__>
		case 0b0000: return 0x0;
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	08 95       	ret
		case 0b0001: return 0x1;
		case 0b0010: return 0x2;
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	08 95       	ret
		case 0b0011: return 0x3;
  d8:	83 e0       	ldi	r24, 0x03	; 3
  da:	08 95       	ret
		case 0b0100: return 0x4;
  dc:	84 e0       	ldi	r24, 0x04	; 4
  de:	08 95       	ret
		case 0b0101: return 0x5;
  e0:	85 e0       	ldi	r24, 0x05	; 5
  e2:	08 95       	ret
		case 0b0110: return 0x6;
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	08 95       	ret
		case 0b0111: return 0x7;
  e8:	87 e0       	ldi	r24, 0x07	; 7
  ea:	08 95       	ret
		case 0b1000: return 0x8;
  ec:	88 e0       	ldi	r24, 0x08	; 8
  ee:	08 95       	ret
		case 0b1001: return 0x9;
  f0:	89 e0       	ldi	r24, 0x09	; 9
  f2:	08 95       	ret
		case 0b1010: return 0xA;
  f4:	8a e0       	ldi	r24, 0x0A	; 10
  f6:	08 95       	ret
		case 0b1011: return 0xB;
  f8:	8b e0       	ldi	r24, 0x0B	; 11
  fa:	08 95       	ret
		case 0b1100: return 0xC;
  fc:	8c e0       	ldi	r24, 0x0C	; 12
  fe:	08 95       	ret
		case 0b1101: return 0xD;
 100:	8d e0       	ldi	r24, 0x0D	; 13
 102:	08 95       	ret
		case 0b1110: return 0xE;
 104:	8e e0       	ldi	r24, 0x0E	; 14
 106:	08 95       	ret
		case 0b1111: return 0xF;
 108:	8f e0       	ldi	r24, 0x0F	; 15
 10a:	08 95       	ret
#include <util/delay.h>

uint8_t bin_to_hex(uint8_t bin) {
	switch (bin) {
		case 0b0000: return 0x0;
		case 0b0001: return 0x1;
 10c:	81 e0       	ldi	r24, 0x01	; 1
		case 0b1101: return 0xD;
		case 0b1110: return 0xE;
		case 0b1111: return 0xF;
		default: return 0x0;
	}
}
 10e:	08 95       	ret

00000110 <display_hex>:

void display_hex(uint8_t hex) {
	switch (hex) {
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	fc 01       	movw	r30, r24
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	ef 30       	cpi	r30, 0x0F	; 15
 118:	f1 05       	cpc	r31, r1
 11a:	08 f0       	brcs	.+2      	; 0x11e <display_hex+0xe>
 11c:	5e c0       	rjmp	.+188    	; 0x1da <display_hex+0xca>
 11e:	ed 5b       	subi	r30, 0xBD	; 189
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	0c 94 20 01 	jmp	0x240	; 0x240 <__tablejump2__>
		case 0x1: // Display '1'
		PORTC = 0b00000110;
 126:	86 e0       	ldi	r24, 0x06	; 6
 128:	88 b9       	out	0x08, r24	; 8
		PORTB &= 0xFE;
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	8e 7f       	andi	r24, 0xFE	; 254
 12e:	85 b9       	out	0x05, r24	; 5
		break;
 130:	08 95       	ret
		case 0x2: // Display '2'
		PORTC = 0b01011011;
 132:	8b e5       	ldi	r24, 0x5B	; 91
 134:	88 b9       	out	0x08, r24	; 8
		PORTB |= 0x01;
 136:	85 b1       	in	r24, 0x05	; 5
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	85 b9       	out	0x05, r24	; 5
		break;
 13c:	08 95       	ret
		case 0x3: // Display '3'
		PORTC = 0b01001111;
 13e:	8f e4       	ldi	r24, 0x4F	; 79
 140:	88 b9       	out	0x08, r24	; 8
		PORTB |= 0x01;
 142:	85 b1       	in	r24, 0x05	; 5
 144:	81 60       	ori	r24, 0x01	; 1
 146:	85 b9       	out	0x05, r24	; 5
		break;
 148:	08 95       	ret
		case 0x4: // Display '4'
		PORTC = 0b01100110;
 14a:	86 e6       	ldi	r24, 0x66	; 102
 14c:	88 b9       	out	0x08, r24	; 8
		PORTB |= 0x01;
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	81 60       	ori	r24, 0x01	; 1
 152:	85 b9       	out	0x05, r24	; 5
		break;
 154:	08 95       	ret
		case 0x5: // Display '5'
		PORTC = 0b01101101;
 156:	8d e6       	ldi	r24, 0x6D	; 109
 158:	88 b9       	out	0x08, r24	; 8
		PORTB |= 0x01;
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	85 b9       	out	0x05, r24	; 5
		break;
 160:	08 95       	ret
		case 0x6: // Display '6'
		PORTC = 0b01111101;
 162:	8d e7       	ldi	r24, 0x7D	; 125
 164:	88 b9       	out	0x08, r24	; 8
		PORTB |= 0x01;
 166:	85 b1       	in	r24, 0x05	; 5
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	85 b9       	out	0x05, r24	; 5
		break;
 16c:	08 95       	ret
		case 0x7: // Display '7'
		PORTC = 0b00000111;
 16e:	87 e0       	ldi	r24, 0x07	; 7
 170:	88 b9       	out	0x08, r24	; 8
		PORTB &= 0xFE;
 172:	85 b1       	in	r24, 0x05	; 5
 174:	8e 7f       	andi	r24, 0xFE	; 254
 176:	85 b9       	out	0x05, r24	; 5
		break;
 178:	08 95       	ret
		case 0x8: // Display '8'
		PORTC = 0b01111111;
 17a:	8f e7       	ldi	r24, 0x7F	; 127
 17c:	88 b9       	out	0x08, r24	; 8
		PORTB |= 0x01;
 17e:	85 b1       	in	r24, 0x05	; 5
 180:	81 60       	ori	r24, 0x01	; 1
 182:	85 b9       	out	0x05, r24	; 5
		break;
 184:	08 95       	ret
		case 0x9: // Display '9'
		PORTC = 0b01101111;
 186:	8f e6       	ldi	r24, 0x6F	; 111
 188:	88 b9       	out	0x08, r24	; 8
		PORTB |= 0x01;
 18a:	85 b1       	in	r24, 0x05	; 5
 18c:	81 60       	ori	r24, 0x01	; 1
 18e:	85 b9       	out	0x05, r24	; 5
		break;
 190:	08 95       	ret
		case 0xA: // Display 'A'
		PORTC = 0b01110111;
 192:	87 e7       	ldi	r24, 0x77	; 119
 194:	88 b9       	out	0x08, r24	; 8
		PORTB |= 0x01;
 196:	85 b1       	in	r24, 0x05	; 5
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	85 b9       	out	0x05, r24	; 5
		break;
 19c:	08 95       	ret
		case 0xB: // Display 'B'
		PORTC = 0b01111100;
 19e:	8c e7       	ldi	r24, 0x7C	; 124
 1a0:	88 b9       	out	0x08, r24	; 8
		PORTB |= 0x01;
 1a2:	85 b1       	in	r24, 0x05	; 5
 1a4:	81 60       	ori	r24, 0x01	; 1
 1a6:	85 b9       	out	0x05, r24	; 5
		break;
 1a8:	08 95       	ret
		case 0xC: // Display 'C'
		PORTC = 0b00111001;
 1aa:	89 e3       	ldi	r24, 0x39	; 57
 1ac:	88 b9       	out	0x08, r24	; 8
		PORTB &= 0xFE;
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	8e 7f       	andi	r24, 0xFE	; 254
 1b2:	85 b9       	out	0x05, r24	; 5
		break;
 1b4:	08 95       	ret
		case 0xD: // Display 'D'
		PORTC = 0b01011110;
 1b6:	8e e5       	ldi	r24, 0x5E	; 94
 1b8:	88 b9       	out	0x08, r24	; 8
		PORTB |= 0x01;
 1ba:	85 b1       	in	r24, 0x05	; 5
 1bc:	81 60       	ori	r24, 0x01	; 1
 1be:	85 b9       	out	0x05, r24	; 5
		break;
 1c0:	08 95       	ret
		case 0xE: // Display 'E'
		PORTC = 0b01111001;
 1c2:	89 e7       	ldi	r24, 0x79	; 121
 1c4:	88 b9       	out	0x08, r24	; 8
		PORTB |= 0x01;
 1c6:	85 b1       	in	r24, 0x05	; 5
 1c8:	81 60       	ori	r24, 0x01	; 1
 1ca:	85 b9       	out	0x05, r24	; 5
		break;
 1cc:	08 95       	ret
		case 0xF: // Display 'F'
		PORTC = 0b01110001;
 1ce:	81 e7       	ldi	r24, 0x71	; 113
 1d0:	88 b9       	out	0x08, r24	; 8
		PORTB |= 0x01;
 1d2:	85 b1       	in	r24, 0x05	; 5
 1d4:	81 60       	ori	r24, 0x01	; 1
 1d6:	85 b9       	out	0x05, r24	; 5
		break;
 1d8:	08 95       	ret
		default:
		PORTC = 0b00111111; // Blank if not valid hex digit
 1da:	8f e3       	ldi	r24, 0x3F	; 63
 1dc:	88 b9       	out	0x08, r24	; 8
		PORTB &= 0xFE;
 1de:	85 b1       	in	r24, 0x05	; 5
 1e0:	8e 7f       	andi	r24, 0xFE	; 254
 1e2:	85 b9       	out	0x05, r24	; 5
 1e4:	08 95       	ret

000001e6 <main>:
}

int main(void) {
	uint8_t sw1, sw2;
	
	DDRD = 0x00; 
 1e6:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0x0F; 
 1e8:	8f e0       	ldi	r24, 0x0F	; 15
 1ea:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x3F; 
 1ec:	8f e3       	ldi	r24, 0x3F	; 63
 1ee:	87 b9       	out	0x07, r24	; 7

	while (1) {
		uint8_t d = PIND;
 1f0:	89 b1       	in	r24, 0x09	; 9
		sw1 = d & 0x0F; 
		sw2 = (d >> 4) & 0x0F; 
 1f2:	d8 2f       	mov	r29, r24
 1f4:	d2 95       	swap	r29
 1f6:	df 70       	andi	r29, 0x0F	; 15

		uint8_t hex_sw1 = bin_to_hex(sw1);
 1f8:	8f 70       	andi	r24, 0x0F	; 15
 1fa:	0e 94 5e 00 	call	0xbc	; 0xbc <bin_to_hex>
 1fe:	c8 2f       	mov	r28, r24
		uint8_t hex_sw2 = bin_to_hex(sw2);
 200:	8d 2f       	mov	r24, r29
 202:	0e 94 5e 00 	call	0xbc	; 0xbc <bin_to_hex>

		if (hex_sw1 == hex_sw2) {
 206:	c8 13       	cpse	r28, r24
 208:	06 c0       	rjmp	.+12     	; 0x216 <main+0x30>
			// Case 1: sw1 == sw2
			PORTB = 0x04; // Turn on PB2 LED
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	85 b9       	out	0x05, r24	; 5
			display_hex(hex_sw1);
 20e:	8c 2f       	mov	r24, r28
 210:	0e 94 88 00 	call	0x110	; 0x110 <display_hex>
 214:	0e c0       	rjmp	.+28     	; 0x232 <main+0x4c>
		} else if (hex_sw1 < hex_sw2) {
 216:	c8 17       	cp	r28, r24
 218:	30 f4       	brcc	.+12     	; 0x226 <main+0x40>
			// Case 2: sw1 < sw2
			PORTB = 0x02; // Turn on PB1 LED
 21a:	92 e0       	ldi	r25, 0x02	; 2
 21c:	95 b9       	out	0x05, r25	; 5
			display_hex(hex_sw2 - hex_sw1);
 21e:	8c 1b       	sub	r24, r28
 220:	0e 94 88 00 	call	0x110	; 0x110 <display_hex>
 224:	06 c0       	rjmp	.+12     	; 0x232 <main+0x4c>
		} else {
			// Case 3: sw1 > sw2
			PORTB = 0x08; // Turn on PB3 LED
 226:	98 e0       	ldi	r25, 0x08	; 8
 228:	95 b9       	out	0x05, r25	; 5
			display_hex(hex_sw1 - hex_sw2);
 22a:	c8 1b       	sub	r28, r24
 22c:	8c 2f       	mov	r24, r28
 22e:	0e 94 88 00 	call	0x110	; 0x110 <display_hex>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	8f e2       	ldi	r24, 0x2F	; 47
 234:	95 e7       	ldi	r25, 0x75	; 117
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <main+0x50>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x56>
 23c:	00 00       	nop
 23e:	d8 cf       	rjmp	.-80     	; 0x1f0 <main+0xa>

00000240 <__tablejump2__>:
 240:	ee 0f       	add	r30, r30
 242:	ff 1f       	adc	r31, r31
 244:	05 90       	lpm	r0, Z+
 246:	f4 91       	lpm	r31, Z
 248:	e0 2d       	mov	r30, r0
 24a:	09 94       	ijmp

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
